package com.progmatik.zkhphone.classes;

    import android.content.Context;
    import android.telephony.CellInfo;
    import android.telephony.SubscriptionInfo;
    import android.telephony.SubscriptionManager;
    import android.telephony.TelephonyManager;
    import android.telephony.gsm.GsmCellLocation;

    import java.lang.reflect.Method;
    import java.util.ArrayList;
    import java.util.List;


    public final class phoneInfo {

        public class simCards {
            private ArrayList<simCardInfo> simList;

            public simCards() {
                simList = new ArrayList<simCardInfo>();
                simList.add( new simCardInfo() );
            }

            public int getCount() {
                return simList.size();
            }

            public simCardInfo getSimCard(int index) {
                if ( index > 0 && index < simList.size() ) {
                    return simList.get( index );
                }
                return null;
            }
        }

        public class simCardInfo {
            private boolean ready;
            private String state;
            private String iccid;
            private String imsi;
            private String spn;
            private String mcc;
            private String mnc;
            private String mcc_mnc;
            private String msisdn;
            private String imei;
            private String lai;
            private String lac;
            private String cellID;

            public simCardInfo() {
                this.ready = false;
                this.state = null;
                this.iccid = null;
                this.imsi = null;
                this.spn = null;
                this.mcc = null;
                this.mnc = null;
                this.msisdn = null;
                this.imei = null;
                this.lai = null;
                this.lac = null;
                this.cellID = null;
            }

            public boolean getReady() { return this.ready; }
            public void setReady( boolean ready ) { this.ready = ready; }

            public String getState() { return this.state; }
            public void setState( String state ) { this.state = state; }

            public String getICCID() { return this.iccid; }
            public void setICCID( String iccid ) { this.iccid = iccid; }

            public String getIMSI() { return this.imsi; }
            public void setIMSI( String imsi ) { this.imsi = imsi; }

            public String getSPN() { return this.spn; }
            public void setSPN( String spn ) { this.spn = spn; }

            public String getMCC() { return this.mcc; }
            public void setMCC( String mcc ) { this.mcc = mcc; }

            public String getMNC() { return this.mnc; }
            public void setMNC( String mnc ) { this.mnc = mnc; }

            public String getMCCMNC() { return this.mcc_mnc; }
            public void setMCCMNC( String mcc_mnc ) { this.mcc_mnc = mcc_mnc; }

            public String getMSISDN() { return this.msisdn; }
            public void setMSISDN( String msisdn ) { this.msisdn = msisdn; }

            public String getIMEI() { return this.imei; }
            public void setIMEI( String imei ) { this.imei = imei; }

            public String getLAI() { return this.lai; }
            public void setLAI( String lai ) { this.lai = lai; }

            public String getLAC() { return this.lac; }
            public void setLAC( String lac ) { this.lac = lac; }

            public String getCELLID() { return this.cellID; }
            public void setCELLID( String cellID ) { this.cellID = cellID; }

        }
        /*@
       @requires context != null;
       @ensures phnInfo != null;
          @*/
        public phoneInfo(Context context) {

            simCards simCards = new simCards();

            TelephonyManager telMngr = ((TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE));
            if ( android.os.Build.VERSION.SDK_INT >= 26 ) {
                SubscriptionManager sm = SubscriptionManager.from(context);
                List<SubscriptionInfo> sis = sm.getActiveSubscriptionInfoList();
                SubscriptionInfo si = sis.get(0);
                simCards.getSimCard(0).setICCID( si.getIccId() );
            } else {
                simCards.getSimCard(0).setICCID( telMngr.getSimSerialNumber() );
            }
            simCards.getSimCard(0).setIMSI( telMngr.getSubscriberId() );
            simCards.getSimCard(0).setSPN( telMngr.getSimOperatorName() );
            simCards.getSimCard(0).setMCC( telMngr.getNetworkCountryIso() );
            simCards.getSimCard(0).setMNC( telMngr.getNetworkOperatorName() );
            simCards.getSimCard(0).setMCCMNC( telMngr.getSimOperator() );
            simCards.getSimCard(0).setMSISDN( telMngr.getLine1Number() );
            simCards.getSimCard(0).setIMEI( ( android.os.Build.VERSION.SDK_INT >= 26 ? telMngr.getImei() : telMngr.getDeviceId() )  );

            //phnInf.sim1_NC = telMngr.getNeighboringCellInfo();

            if (telMngr.getPhoneType() == TelephonyManager.PHONE_TYPE_GSM) {
                if ( android.os.Build.VERSION.SDK_INT >= 26 ) {
                    final List<CellInfo> cellInfo = ( List<CellInfo> ) telMngr.getAllCellInfo();
                    if ( cellInfo != null ) {

                    }
                } else {
                    final GsmCellLocation location = (GsmCellLocation) telMngr.getCellLocation();
                    if ( location != null) {
                        simCards.getSimCard(0).setLAC( Integer.toString(location.getLac() ) );
                        simCards.getSimCard(0).setCELLID( Integer.toString(location.getCid() ) );
                    }
                }
            }

            phnInf.imsiSIM2 = null;

            phnInf.isSIM1Ready = telMngr.getSimState() == TelephonyManager.SIM_STATE_READY;
            phnInf.isSIM2Ready = false;

            phnInf.sim1_STATE = simState(telMngr.getSimState());
            try {
                //phnInf.isSIM1Ready = getSIMStateBySlot(context, "getSimState", 0);
                phnInf.isSIM2Ready = getSIMStateBySlot(context, "getSimState", 1);
                //System.out.println("!!");
            } catch (ITgerMethodNotFoundException e1) {
                //Call here for next manufacturer's predicted method name if you wish
                e1.printStackTrace();
            }

            if (phnInf.isSIM2Ready) {
                try {
                    // phnInf.sim1_IMSI = getDeviceIdBySlot(context, "getDeviceId", 0);
                    phnInf.imsiSIM2 = getDeviceIdBySlot(context, "getDeviceId", 1);
                    phnInf.sim2_ICCID = getDeviceIdBySlot(context, "getSimSerialNumber", 1);
                    phnInf.sim2_IMSI = getDeviceIdBySlot(context, "getSubscriberId", 1);
                    phnInf.sim2_SPN = getDeviceIdBySlot(context, "getSimOperatorName", 1);
                    phnInf.sim2_MCC = getDeviceIdBySlot(context, "getNetworkCountryIso", 1);
                    phnInf.sim2_MNC = getDeviceIdBySlot(context, "getNetworkOperatorName", 1);
                    phnInf.sim2_MCC_MNC = getDeviceIdBySlot(context, "getSimOperator", 1);
                    phnInf.sim2_MSISDN = getDeviceIdBySlot(context, "getLine1Number", 1);
                    phnInf.sim2_IMEI = getDeviceIdBySlot(context, "getDeviceId", 1);

                    if (telMngr.getPhoneType() == TelephonyManager.PHONE_TYPE_GSM) {
                        final GsmCellLocation location = getCellLocBySlot(context, "getCellLocation", 1);// telMngr.getCellLocation();
                        if (location != null) {
                            phnInf.sim2_LAC = Integer.toString(location.getLac());
                            phnInf.sim2_CellID = Integer.toString(location.getCid());
                        }
                    }

                    System.out.println("!");
                } catch (ITgerMethodNotFoundException e1) {
                    //Call here for next manufacturer's predicted method name if you wish
                    e1.printStackTrace();
                }
            }

            phnInf.scitemsArr = new ArrayList<Sci>();

            phnInf.scitemsArr.add(new Sci("SIM 1 state", phnInf.sim1_STATE));
            phnInf.scitemsArr.add(new Sci("Integrated circuit card identifier (ICCID)", phnInf.sim1_ICCID));
            phnInf.scitemsArr.add(new Sci("Unique device ID (IMEI or MEID/ESN for CDMA)", phnInf.sim1_IMEI));
            phnInf.scitemsArr.add(new Sci("International mobile subscriber identity (IMSI)", phnInf.sim1_IMSI));
            phnInf.scitemsArr.add(new Sci("Service provider name (SPN)", phnInf.sim1_SPN));
            phnInf.scitemsArr.add(new Sci("Mobile country code (MCC)", phnInf.sim1_MCC));
            phnInf.scitemsArr.add(new Sci("Mobile operator name", phnInf.sim1_MNC));
            phnInf.scitemsArr.add(new Sci("Mobile country code + mobile network code (MCC+MNC)", phnInf.sim1_MCC_MNC));
            phnInf.scitemsArr.add(new Sci("Mobile station international subscriber directory number (MSISDN)", phnInf.sim1_MSISDN));
            phnInf.scitemsArr.add(new Sci("Location Area Code (LAC)", phnInf.sim1_LAC));
            phnInf.scitemsArr.add(new Sci("Cell Tower ID (CID)", phnInf.sim1_CellID));

            if (phnInf.isSIM2Ready) {
                phnInf.scitemsArr.add(new Sci(" ", " "));
                phnInf.scitemsArr.add(new Sci("SIM 2 state", phnInf.sim2_STATE));
                phnInf.scitemsArr.add(new Sci("Integrated circuit card identifier (ICCID)", phnInf.sim2_ICCID));
                phnInf.scitemsArr.add(new Sci("Unique device ID (IMEI or MEID/ESN for CDMA)", phnInf.sim2_IMEI));
                phnInf.scitemsArr.add(new Sci("International mobile subscriber identity (IMSI)", phnInf.sim2_IMSI));
                phnInf.scitemsArr.add(new Sci("Service provider name (SPN)", phnInf.sim2_SPN));
                phnInf.scitemsArr.add(new Sci("Mobile country code (MCC)", phnInf.sim2_MCC));
                phnInf.scitemsArr.add(new Sci("Mobile operator name", phnInf.sim2_MNC));
                phnInf.scitemsArr.add(new Sci("Mobile country code + mobile network code (MCC+MNC)", phnInf.sim2_MCC_MNC));
                phnInf.scitemsArr.add(new Sci("Mobile station international subscriber directory number (MSISDN)", phnInf.sim2_MSISDN));
                phnInf.scitemsArr.add(new Sci("Location Area Code (LAC)", phnInf.sim2_LAC));
                phnInf.scitemsArr.add(new Sci("Cell Tower ID (CID)", phnInf.sim2_CellID));


                //phnInf.scitemsArr.add(new Sci("NC (Neighboring Cell ", phnInf.sim1_NC.toString() ));

            }

            return phnInf;
        }

        private static String simState(int simState) {
            switch (simState) {
                case 0:
                    return "UNKNOWN";
                case 1:
                    return "ABSENT";
                case 2:
                    return "REQUIRED";
                case 3:
                    return "PUK_REQUIRED";
                case 4:
                    return "NETWORK_LOCKED";
                case 5:
                    return "READY";
                case 6:
                    return "NOT_READY";
                case 7:
                    return "PERM_DISABLED";
                case 8:
                    return "CARD_IO_ERROR";
            }
            return "??? " + simState;
        }

        private static String getDeviceIdBySlot(Context context, String predictedMethodName, int slotID) throws ITgerMethodNotFoundException {

            String imsi = null;
            TelephonyManager telephony = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
            try {
                Class<?> telephonyClass = Class.forName(telephony.getClass().getName());
                Class<?>[] parameter = new Class[1];
                parameter[0] = int.class;
                Method getSimID = telephonyClass.getMethod(predictedMethodName, parameter);

                Object[] obParameter = new Object[1];
                obParameter[0] = slotID;
                Object ob_phone = getSimID.invoke(telephony, obParameter);

                if (ob_phone != null) {
                    imsi = ob_phone.toString();

                }
            } catch (Exception e) {
                e.printStackTrace();
                throw new ITgerMethodNotFoundException(predictedMethodName);
            }

            return imsi;
        }

        private static GsmCellLocation getCellLocBySlot(Context context, String predictedMethodName, int slotID) throws ITgerMethodNotFoundException {

            GsmCellLocation cloc = null;
            TelephonyManager telephony = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
            try {
                Class<?> telephonyClass = Class.forName(telephony.getClass().getName());
                Class<?>[] parameter = new Class[1];
                parameter[0] = int.class;
                Method getSimID = telephonyClass.getMethod(predictedMethodName, parameter);

                Object[] obParameter = new Object[1];
                obParameter[0] = slotID;
                Object ob_phone = getSimID.invoke(telephony, obParameter);

                if (ob_phone != null) {
                    cloc = (GsmCellLocation) ob_phone;

                }
            } catch (Exception e) {
                e.printStackTrace();
                throw new ITgerMethodNotFoundException(predictedMethodName);
            }

            return cloc;
        }

        private static boolean getSIMStateBySlot(Context context, String predictedMethodName, int slotID) throws ITgerMethodNotFoundException {
            boolean isReady = false;
            TelephonyManager telephony = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
            try {
                Class<?> telephonyClass = Class.forName(telephony.getClass().getName());
                Class<?>[] parameter = new Class[1];
                parameter[0] = int.class;
                Method getSimState = telephonyClass.getMethod(predictedMethodName, parameter);
                Object[] obParameter = new Object[1];
                obParameter[0] = slotID;
                Object ob_phone = getSimState.invoke(telephony, obParameter);

                if (ob_phone != null) {
                    int simState = Integer.parseInt(ob_phone.toString());
                    phnInf.sim2_STATE = simState(simState);
                    if ((simState != TelephonyManager.SIM_STATE_ABSENT) && (simState != TelephonyManager.SIM_STATE_UNKNOWN)) {
                        isReady = true;
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
                throw new ITgerMethodNotFoundException(predictedMethodName);
            }

            return isReady;
        }

        public static void printTelephonyManagerMethodNamesForThisDevice(Context context) {

            TelephonyManager telephony = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
            Class<?> telephonyClass;
            try {
                System.out.println("-------------------------------");
                telephonyClass = Class.forName(telephony.getClass().getName());
                Method[] methods = telephonyClass.getMethods();

                for (Method method : methods) {
                    // if (methods[idx].getName().startsWith("get")) {
                    System.out.println("\n" + method.getName() + " declared by " + method.getDeclaringClass());//+ "  superclass " + methods[idx].getDeclaringClass().getSuperclass().getName());
                    //}
                }
                System.out.println("-------------------------------");
            } catch (ClassNotFoundException e) {
                e.printStackTrace();
            }
        }

        public boolean isSIM1Ready() {
            return isSIM1Ready;
        }

        public boolean isSIM2Ready() {
            return isSIM2Ready;
        }

        private boolean isDualSIM() {
            return imsiSIM2 != null;
        }

        @Override
        public String toString() {
            return "XXXXXXXXXXXXXXXX phnInfo{" +
                    "imsiSIM1='" + sim1_IMSI + '\'' +
                    ", imsiSIM2='" + imsiSIM2 + '\'' +
                    ", isSIM1Ready=" + isSIM1Ready +
                    ", isSIM2Ready=" + isSIM2Ready +
                    '}';
        }

        private static class ITgerMethodNotFoundException extends Exception {
            private static final long serialVersionUID = -996812356902545308L;

            public ITgerMethodNotFoundException(String info) {
                super(info);
            }

        }
    }    